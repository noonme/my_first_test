// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLeranInf is a mock of LeranInf interface.
type MockLeranInf struct {
	ctrl     *gomock.Controller
	recorder *MockLeranInfMockRecorder
}

// MockLeranInfMockRecorder is the mock recorder for MockLeranInf.
type MockLeranInfMockRecorder struct {
	mock *MockLeranInf
}

// NewMockLeranInf creates a new mock instance.
func NewMockLeranInf(ctrl *gomock.Controller) *MockLeranInf {
	mock := &MockLeranInf{ctrl: ctrl}
	mock.recorder = &MockLeranInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeranInf) EXPECT() *MockLeranInfMockRecorder {
	return m.recorder
}

// LeanC mocks base method.
func (m *MockLeranInf) LeanC(req string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeanC", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeanC indicates an expected call of LeanC.
func (mr *MockLeranInfMockRecorder) LeanC(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeanC", reflect.TypeOf((*MockLeranInf)(nil).LeanC), req)
}

// LearnGo mocks base method.
func (m *MockLeranInf) LearnGo(req string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LearnGo", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LearnGo indicates an expected call of LearnGo.
func (mr *MockLeranInfMockRecorder) LearnGo(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LearnGo", reflect.TypeOf((*MockLeranInf)(nil).LearnGo), req)
}
